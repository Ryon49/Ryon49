package gitlet;

import java.time.Instant;
import java.util.HashMap;
import java.util.StringJoiner;
import java.util.function.BiConsumer;

/**
 * Commit.
 *
 * @author Weifeng Dong
 */
public class Commit extends GitletObject {

    /**
     * message of commit.
     */
    private String _msg;

    /**
     * parent of commit.
     */
    private String _parent;

    /**
     * merging commit hash.
     */
    private String _merge;

    /**
     * date of commit.
     */
    private String _date;

    /**
     * <fileName -> hash>, objects tracked by commit.
     */
    private HashMap<String, String> _blobs;

    /**
     * hash of commit.
     */
    private String _hash;

    /**
     * Constructor.
     *
     * @param msg    message.
     * @param parent parent hash.
     * @param date   date object.
     * @param blobs  tracker from last commit
     *               (null for initial commit).
     */
    public Commit(String msg, String parent,
                  Instant date, HashMap<String, String> blobs) {
        this(msg, parent, "", date, blobs);
    }

    /**
     * Constructor.
     *
     * @param msg    message.
     * @param parent parent hash.
     * @param merged merged commit hash.
     * @param date   date object.
     * @param blobs  tracker from last commit
     *               (null for initial commit).
     */
    public Commit(String msg, String parent, String merged,
                  Instant date, HashMap<String, String> blobs) {
        _msg = msg;
        _parent = parent;
        _merge = merged;
        _date = Utils.format(date);
        _blobs = blobs;
        _hash = Utils.sha1(this);
    }


    /**
     * getter for _parent.
     *
     * @return parent of commit.
     */
    public String getParent() {
        return _parent;
    }

    /**
     * getter for _blobs.
     *
     * @return collections of objects
     * that is tracked by this commit.
     */
    public HashMap<String, String> getBlobs() {
        return _blobs;
    }

    @Override
    public String getHash() {
        return _hash;
    }

    /**
     * @param fileName file name.
     * @return true if given file is tracked by this commit.
     */
    public boolean containsFile(String fileName) {
        return _blobs.containsKey(fileName);
    }

    /**
     * @return string that print our by LogCommand.
     */
    public String log() {
        StringJoiner joiner = new StringJoiner("\n", "", "\n");
        joiner.add("===")
                .add("commit " + getHash());
        if (isMergeCommit()) {
            String mergeMsg = new StringJoiner(" ")
                    .add("Merge:")
                    .add(_parent.substring(0, 7))
                    .add(_merge.substring(0, 7))
                    .toString();
            joiner.add(mergeMsg);
        }
        joiner.add("Date: " + _date)
                .add(_msg);

        return joiner.toString();
    }

    /**
     * getter for _msg.
     *
     * @return message of commit.
     */
    public String getMessage() {
        return _msg;
    }

    /**
     * @param action action.
     */
    public void forEach(BiConsumer<String, String> action) {
        _blobs.forEach(action);
    }

    /**
     * @param fileName file name.
     * @return blob hash of tracked file.
     */
    public String get(String fileName) {
        return getBlobs().get(fileName);
    }

    /**
     * @return true if commit is generated by merging.
     */
    public boolean isMergeCommit() {
        return !_merge.isEmpty();
    }

    /**
     * getter for _merge.
     *
     * @return _merge.
     */
    public String getMergeCommitHash() {
        return _merge;
    }
}
